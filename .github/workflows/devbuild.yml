# This is a basic workflow to help you get started with Actions

name: cloud HUB Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [develop]
  
    # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    build:
      # The type of runner that the job will run on
      runs-on: ubuntu-latest
  
      # Steps represent a sequence of tasks that will be executed as part of the job
      steps:
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - name: Checkout this repo
          uses: actions/checkout@v3
        - name: Cache dependencies
          uses: actions/cache@v3
          with:
            path: ~/.m2/repository
            key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
            restore-keys: |
              ${{ runner.os }}-maven-
        - name: Set up JDK 1.8
          uses: actions/setup-java@v3
          with:
            distribution: 'zulu'
            java-version: 8
        - name: Build with Maven
          run: mvn -B package --file pom.xml
        - name: Stamp artifact file name with commit hash
          run: |
            artifactName1=$(ls target/*.jar | head -1)
            commitHash=$(git rev-parse --short "$GITHUB_SHA")
            artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
            mv $artifactName1 $artifactName2
        - name: Upload artifact 
          uses: actions/upload-artifact@v3
          with:
            name: artifacts
            path: target/*.jar
      
    DEV:
      needs: build
      environment: DEV
      runs-on: ubuntu-latest
      steps:    
      - name: Checkout this repo
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**//pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/download-artifact@v3
        with:
          name: artifacts
      - name: Deploy to CloudHub
        env:
          USERNAME: ${{ secrets.USERNAME}}
          PASSWORD: ${{ secrets.PASSWORD }}
          CLOUDHUB_APP_NAME: ${{vars.APPLICATIONNAME}}
          REGION: ${{vars.REGION}}
          RUNTIME: ${{vars.MULEVERSION}}
          ENVIRONMENT: ${{vars.ENVIRONMENT}}
          WORKERS: ${{vars.WORKERS}}
          WORKER_TYPE: ${{vars.WORKERTYPE}}
          CLIENT_ID: ${{ secrets.CLIENT_ID_DEV }}
          CLIENTSECRET: ${{ secrets.CLIENT_SECRET_DEV }}
        run: |
         echo "PRADEEP"
         echo $USERNAME
         echo ${CLOUDHUB_APP_NAME}
         echo $REGION
         echo "Sundriyal"
          artifactName=$(ls *.jar | head -1)
           mvn deploy -B -X -DmuleDeploy \
          -Dmule.artifact=$artifactName \
          -Danypoint_platform_username="$USERNAME" \
          -Danypoint_platform_password="$PASSWORD" \
          -Denvironment="${ENVIRONMENT}" \
          -Danypoint_platform_client_id="${CLIENT_ID}" \
          -Danypoint_platform_client_secret="${CLIENTSECRET}" \
          -DmuleVersion="${RUNTIME}" \
          -DapplicationName="${CLOUDHUB_APP_NAME}" \
          -Dregion="${REGION}" \
          -Dworkers="${WORKERS}" \
          -DworkerType="${WORKER_TYPE}" \
          --file pom.xml

  